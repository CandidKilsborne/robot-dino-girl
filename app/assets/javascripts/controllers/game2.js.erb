function TwoPlayerGameController() {
  this.player;
  this.playerTwo;
  this.platforms;
  this.cursors;
  this.spacebar;
  this.shootWeapon;
  this.orbs;
  this.redOrbs;
  this.score;
  this.scoreText;
  this.world;
  this.game;
  this.healthbar;
  this.endGame;
  this.ledge;
  this.ground;
  this.sky;
}

TwoPlayerGameController.prototype.run = function() {
  game = new Phaser.Game(800, 600, Phaser.AUTO, 'gameDiv', { preload: this.preload, create: this.create, update: this.update, render: this.render });
  world = new World();
  endGame = new TwoPlayerEndGame(game);
}

TwoPlayerGameController.prototype.preload = function() {
  game.load.image('space', '<%= asset_path "space.jpg" %>');
  game.load.image('cloud', '<%= asset_path "cloud-sprite.png" %>');
  game.load.image('redOrb', '<%= asset_path "unsafe_orb.png" %>');
  game.load.image('heart', '<%= asset_path "heart-sprite.png" %>');
  game.load.image('blueOrb', '<%= asset_path "safe_orb.png" %>');
  game.load.image('hitBox', '<%= asset_path "red.jpg" %>');
  game.load.spritesheet('dude', '<%= asset_path "dude.png" %>', 32, 48);
  game.load.spritesheet('dude2', '<%= asset_path "dude2.png" %>', 32, 48);
  // load second dude spritesheet for second player //
  endGame.loadAssets();
}

TwoPlayerGameController.prototype.create = function() {

  // Create World
  world.setCanvas(game, 0, 0, 1280, 600);

  game.physics.startSystem(Phaser.Physics.ARCADE);

  world.buildWorld(game);

  // CREATE ASTERIA
  asteria = new Asteria(game, 475, 0, 'dude');
  player = asteria.sprite;
  asteria.createHealthbar(game);
  game.physics.arcade.enable(player);
  asteria.entersTheScene();
  asteria.setMotions();

  // CREATE Wysteria //
  wysteria = new Asteria(game, 425, 0, 'dude2');
  playerTwo = wysteria.sprite;
  wysteria.createWysteriaHealthbar(game);
  game.physics.arcade.enable(playerTwo);
  wysteria.entersTheScene();
  wysteria.setMotions();


  // Set the camera
  world.setCamera(game, player);

  //  SET Asteria CONTROLS
  cursors = game.input.keyboard.createCursorKeys();
  spacebar = game.input.keyboard.addKey(Phaser.Keyboard.SPACEBAR);
  a = game.input.keyboard.addKey(Phaser.Keyboard.A);
  d = game.input.keyboard.addKey(Phaser.Keyboard.D);

  game.input.keyboard.onUpCallback = function(event) {
    if ((event.keyCode == Phaser.Keyboard.DOWN) && player.body.touching.down) {
        asteria.stand();
        asteria.hop();
    }
  }

  // Falling redOrbs
  redOrbs = game.add.group();
  redOrbs.enableBody = true;
  game.time.events.loop(Phaser.Timer.SECOND * 5, rainRedOrbs, game);

  // CREATE BLUE ORBS
  orbs = game.add.group();
  orbs.enableBody = true;
  rainOrbs();
  game.time.events.loop(Phaser.Timer.SECOND * 3, rainOrbs, game);

  //  CREATE SCORE
  score = 0;
  scoreText = game.add.text(600, 16, 'Player 1: ' + score, { fontSize: '32px', fill: '#FFF' });
  scoreText.fixedToCamera = true;

  playerTwoScore = 0;
  playerTwoScoreText = game.add.text(600, 56, 'Player 2: ' + playerTwoScore, { fontSize: '32px', fill: '#FFF' });
  playerTwoScoreText.fixedToCamera = true;

}

TwoPlayerGameController.prototype.update = function() {



  //  Collide the player and the redOrbs with the platforms
  game.physics.arcade.collide(player, platforms);
  game.physics.arcade.collide(playerTwo, platforms);
  game.physics.arcade.collide(player, playerTwo);
  game.physics.arcade.collide(redOrbs, platforms);
  game.physics.arcade.collide(orbs, platforms);

  asteria.setVelocityX(0);
  wysteria.setVelocityX(0);


  ledge.alpha = ledge.lifespan / 10000;

  redOrbs.forEachAlive(function(orb){
    orb.alpha = orb.lifespan / 10000;
  });

  orbs.forEachAlive(function(orb){
    orb.alpha = orb.lifespan / 10000;
  });

  collectRedOrb = function(player, redOrb) {
      redOrb.kill();
  }

  playerTwoCollectRedOrb = function(playerTwo, redOrb) {
      redOrb.kill();
  }

  collectOrbs = function(player, orb) {
    orb.kill();
    //  Add and update the score
    score += 10;
    scoreText.text = 'Player 1: ' + score;
  }

  playerTwoCollectOrbs = function(playerTwo, orb) {
    orb.kill();
    //  Add and update the score
    playerTwoScore += 10;
    playerTwoScoreText.text = 'Player 2: ' + playerTwoScore;
  }
  // Health Conditions //

  loseHealth = function() {
    if (asteria.health === 1){
      player.kill();
    }
    asteria.health -= 1
    healthbar.children.pop();
    hitBox = game.add.sprite( 0, 0, 'hitBox')
    hitBox.width = game.width;
    hitBox.height = game.height;
    hitBox.fixedToCamera = true;
    hitBox.lifespan = 70
    hitBox.alpha = 0.7
  }

  playerTwoLoseHealth = function() {
    if (wysteria.health === 1){
      playerTwo.kill();
    }
    wysteria.health -= 1
    playerTwoHealthbar.children.pop();
    hitBox = game.add.sprite( 0, 0, 'hitBox')
    hitBox.width = game.width;
    hitBox.height = game.height;
    hitBox.fixedToCamera = true;
    hitBox.lifespan = 70
    hitBox.alpha = 0.7
  }

  game.physics.arcade.overlap(player, redOrbs, loseHealth, null, game);
  game.physics.arcade.overlap(player, redOrbs, collectRedOrb, null, game);
  game.physics.arcade.overlap(playerTwo, redOrbs, playerTwoLoseHealth, null, game);
  game.physics.arcade.overlap(playerTwo, redOrbs, playerTwoCollectRedOrb, null, game);

  // Movement Conditions //

  endGame.setConditions(score, playerTwoScore);
  game.physics.arcade.overlap(player, orbs, collectOrbs, null, this);
  game.physics.arcade.overlap(playerTwo, orbs, playerTwoCollectOrbs, null, this);

  // function collisionHandler (obj1, obj2) {
  //   obj1.kill();
  // }

  // game.physics.arcade.collide(player, ground, collisionHandler, null, this);
  // game.physics.arcade.collide(orbs, ground, collisionHandler, null, this);

//Player One Movements //
  if (cursors.left.isDown) {
    asteria.moveLeft();
  } else if (cursors.right.isDown) {
    asteria.moveRight();
  } else {
    asteria.standStill();
  }

  //  Allow the player to jump if they are touching the ground.
  // if (spacebar.isDown && player.body.touching.down) {
  //   asteria.jump();
  // }

  //  Autojump for minigame
  if (player.body.touching.down) {
    asteria.jump();
  }


  if (cursors.down.isDown && player.body.touching.down && cursors.left.isDown) {
      asteria.crawlLeft();
  } else if (cursors.down.isDown && player.body.touching.down && cursors.right.isDown) {
      asteria.crawlRight();
  } else if (cursors.down.isDown && player.body.touching.down) {
      asteria.crouch();
  }

  //Player Two Movements //
  if (a.isDown) {
    wysteria.moveLeft();
  } else if (d.isDown) {
    wysteria.moveRight();
  } else {
    wysteria.standStill();
  }

  if (playerTwo.body.touching.down) {
    wysteria.jump();
  }

}

TwoPlayerGameController.prototype.render = function() {

  // game.debug.cameraInfo(game.camera, 32, 32);
  // game.debug.spriteCoords(player, 32, 500);
  // game.debug.body(platforms.children[1]);
}
